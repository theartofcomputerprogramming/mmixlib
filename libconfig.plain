#ifndef LIBCONFIG_H
#define LIBCONFIG_H

#ifdef WIN32
#pragma warning(disable : 4996)
#endif

#define store_octa(val,addr) (ll=mem_find(addr),ll->tet=(val).h,(ll+1)->tet=(val).l,true)
#define store_tetra(val,addr) (ll=mem_find(addr),ll->tet=(val).l,true)
#define store_wyde(val,addr) (ll=mem_find(addr),ll->tet=(ll->tet&(~(0xFFFF<<((1-((addr).l&0x1))<<4))))|(((val).l&0xFFFF)<<((1-((addr).l&0x1))<<4)),true)
#define store_byte(val,addr) (ll=mem_find(addr),ll->tet=(ll->tet&(~(0xFF<<((3-((addr).l&0x3))<<3))))|(((val).l&0xFF)<<((3-((addr).l&0x3))<<3)),true)

#define load_octa(val,addr) (ll=mem_find(addr),(val)->h=ll->tet,(val)->l=(ll+1)->tet,true)
#define load_tetra(val,addr) (ll=mem_find(addr),(val)->h=0,(val)->l=ll->tet,true)
#define load_wyde(val,addr) (ll=mem_find(addr),(val)->h=0,(val)->l=(ll->tet>>(16*(1-((addr).l&1))))&0xFFFF,true)
#define load_byte(val,addr) (ll=mem_find(addr),(val)->h=0,(val)->l=(ll->tet>>(8*(3-((addr).l&3))))&0xFF,true)

#define store_octa_uncached(val,addr) store_octa(val,addr) 
#define load_octa_uncached(val,addr) load_octa(val,addr)


#define load_instruction(inst,loc) (ll=mem_find(loc),*(inst)=ll->tet,true)
#define store_exec_translation(virt,phys)
#define store_data_translation(virt,phys)

#ifdef WIN32
#define	MMIX_DELAY(ms,d)  Sleep(ms); d=ms
#else
#define	MMIX_DELAY(ms,d)  usleep(1000*ms); d=ms
#endif

/* define this to check for external asynchronous ineterrupts*/
#define MMIX_GET_INTERRUPT

/*convert filenames to file numbers */
#define filename2file(filename, c) (c)

/* this code is executed after processing the commandline */
#define MMIX_AFTER_COMMANDLINE

/* this code is executed before MMIX boots */
#define  MMIX_PREBOOT

/* this code is executed when MMIX enters the handler for Ctrl-C */
#define   MMIX_CTRL_HANDLER

/* this code defines additional options */
#define MMIX_OPTIONS  

/* this defines new interactions for the user */
#define MMIX_INTERACT_STRING 

/* this code defines the actions for the strings above */
#define MMIX_INTERACT_ACTION

#ifdef MMIX_PRINT
extern int mmix_printf(char *format,...);
extern int mmix_fputc(int c, FILE *f);
#define printf(...) mmix_printf(__VA_ARGS__)
#define fprintf(file,...) mmix_printf(__VA_ARGS__)
#define fputc(c,f) mmix_fputc(c,f)
#endif

#define MMIX_USAGE if (!*cur_arg) scan_option("?",true) /* exit with usage note */

/* give a condition to break from the inner loop */
#define MMIX_BREAK_LOOP false

/* give a condition to test for a reboot inside the inner loop */
#define MMIX_REBOOT false

/* define this to get the real TRAP implementation not the MMIXWARE fake TRAPS */
#undef MMIX_TRAP

#define MMIX_END halted

#define MMIX_EXIT(i) exit(i)

/* this is the error exit function */
#define panic(m) (fprintf(stderr,"Panic: %s!\n",m), MMIX_EXIT(-1))

#define MMIX_OPTION_STRING

/* define this if you need the tetra inside the mem_node */
#define MMIX_MEM_TET tetra tet; /* the tetrabyte of simulated memory */

#define write_all_data_cache()
#define clear_all_instruction_cache()
#define clear_all_data_cache()
#define update_vtc(key) zero_octa
#define clear_all_data_vtc()
#define clear_all_instruction_vtc()
#define preload_data_cache(w,xx)
#define prego_instruction(w,xx)
#define store_data_cache(w,xx)
#define delete_data_cache(w,xx)
#define delete_instruction_cache(w,xx)

#include <time.h>
#include "libtype.h"
#include "libglobals.h"
#include "mmixlib.h"


#endif